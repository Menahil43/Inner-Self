package quiz.app;import javax.swing.*;import java.awt.*;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;public class Score extends JFrame {    public Score(String name, int score, int[] personalityScores) {        // Initialize variables        final String finalName = name;        final int finalScore = score;        // Color for text        Color textColor = new Color(239, 164, 60);        // Heading        JLabel heading = new JLabel("Thank you " + finalName + " for Playing!");        heading.setBounds(30, 50, 1150, 30);        heading.setFont(new Font("Mongolian Baiti", Font.BOLD, 28));        heading.setForeground(textColor);        heading.setHorizontalAlignment(SwingConstants.CENTER);        add(heading);        // Display personality scores        displayPersonalityScoresWithBars(personalityScores);        // Suggestion heading        JLabel suggestionHeading = new JLabel("Suggestions for Improvement");        suggestionHeading.setBounds(100, 380, 950, 30); // Positioned above the suggestions        suggestionHeading.setFont(new Font("Mongolian Baiti", Font.BOLD, 30));        suggestionHeading.setForeground(textColor);        suggestionHeading.setHorizontalAlignment(SwingConstants.CENTER);        add(suggestionHeading);        // Suggestion for improvement        String improvementSuggestion = generateImprovementSuggestion(personalityScores);        JLabel suggestionLabel = new JLabel(improvementSuggestion);        suggestionLabel.setBounds(100, 430, 950, 150); // Adjusted for larger window        suggestionLabel.setFont(new Font("Mongolian Baiti", Font.BOLD, 22));        suggestionLabel.setForeground(textColor);        suggestionLabel.setHorizontalAlignment(SwingConstants.CENTER);        suggestionLabel.setVerticalAlignment(SwingConstants.TOP);        add(suggestionLabel);        // Exit button        JButton exit = new JButton("EXIT");        exit.setBounds(500, 600, 150, 40);        exit.setFont(new Font("Mongolian Baiti", Font.BOLD, 25));        exit.setBackground(new Color(0xEFA43C));        exit.setForeground(new Color(0x4F0D03));        exit.setFocusPainted(false);        exit.setBorderPainted(false);        exit.setBorder(null);        exit.setContentAreaFilled(false); // Remove hover effect        exit.setOpaque(true); // Keep background color visible        add(exit);        // Exit button action        exit.addActionListener(e -> {            storeScoresInFile(finalName, finalScore, personalityScores);            setVisible(false);            new SessionStarter();        });        // Frame settings        setSize(1150, 700);        setLocation(100, 50);        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        setResizable(false);        setLayout(null);        // Background image        ImageIcon i11 = new ImageIcon(ClassLoader.getSystemResource("icons/back-01.png"));        Image i22 = i11.getImage().getScaledInstance(1150, 700, Image.SCALE_SMOOTH); // Scale image to match frame size        ImageIcon i33 = new ImageIcon(i22);        JLabel imagee = new JLabel(i33);        imagee.setBounds(0, 0, 1150, 700); // Set bounds to cover entire frame        add(imagee);        // Make the frame visible        setVisible(true);    }    private void displayPersonalityScoresWithBars(int[] personalityScores) {        String[] traitNames = {"Communication", "Empathy", "Adaptability", "Resilience", "Self-Awareness"};        int yPos = 85; // Vertical starting position        for (int i = 0; i < personalityScores.length; i++) {            int score = personalityScores[i];            // Trait label            JLabel traitLabel = new JLabel(traitNames[i]);            traitLabel.setBounds(150, yPos, 200, 30);            traitLabel.setFont(new Font("Mongolian Baiti", Font.BOLD, 20));            traitLabel.setForeground(Color.WHITE);            traitLabel.setHorizontalAlignment(SwingConstants.RIGHT);            add(traitLabel);            // Bar panel divided into 5 segments            JPanel barPanel = new JPanel() {                @Override                protected void paintComponent(Graphics g) {                    super.paintComponent(g);                    int segmentWidth = getWidth() / 5; // Divide bar into 5 equal parts                    for (int j = 0; j < 5; j++) {                        if (j < score) {                            g.setColor(getColorByScore(score)); // Filled segment color                        } else {                            g.setColor(new Color(200, 200, 200)); // Empty segment color (gray)                        }                        g.fillRect(j * segmentWidth, 0, segmentWidth, getHeight());                        g.setColor(Color.BLACK); // Divider color                        g.drawRect(j * segmentWidth, 0, segmentWidth, getHeight());                    }                }            };            barPanel.setBounds(400, yPos + 5, 400, 30); // Adjust size and alignment for larger window            barPanel.setLayout(null); // Disable layout manager            add(barPanel);            yPos += 60; // Move to the next row for the next trait        }    }    private Color getColorByScore(int score) {        if (score >= 4) return new Color(76, 175, 80); // Green        else if (score >= 3) return new Color(255, 193, 7); // Yellow        else return new Color(244, 67, 54); // Red    }    private String generateImprovementSuggestion(int[] personalityScores) {        StringBuilder suggestion = new StringBuilder("<html>");        if (personalityScores[0] <= 3)            suggestion.append("&#8226; Improve communication skills. <br>");        if (personalityScores[1] <= 3)            suggestion.append("&#8226; Work on increasing empathy. <br>");        if (personalityScores[2] <= 3)            suggestion.append("&#8226; Enhance adaptability. <br>");        if (personalityScores[3] <= 3)            suggestion.append("&#8226; Develop resilience. <br>");        if (personalityScores[4] <= 3)            suggestion.append("&#8226; Increase self-awareness. <br>");        if (suggestion.toString().equals("<html>")) {            suggestion.append("You have a great balance of traits!");        }        suggestion.append("</html>");        return suggestion.toString();    }    private void storeScoresInFile(String name, int score, int[] personalityScores) {        try {            File file = new File("score_data.txt");            BufferedWriter writer = new BufferedWriter(new FileWriter(file, true));            writer.write("Name: " + name + ", Score: " + score + ", Personality Scores: ");            writer.write("[Communication=" + personalityScores[0] +                    ", Empathy=" + personalityScores[1] +                    ", Adaptability=" + personalityScores[2] +                    ", Resilience=" + personalityScores[3] +                    ", Self-Awareness=" + personalityScores[4] + "]");            writer.newLine();            writer.close();        } catch (IOException e) {            JOptionPane.showMessageDialog(this, "Error saving scores to file!", "Error", JOptionPane.ERROR_MESSAGE);        }    }    public static void main(String[] args) {        int[] testScores = {4, 3, 2, 5, 1};        new Score("Test User", 10, testScores);    }}